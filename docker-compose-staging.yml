name: justjio

services:
  frontend:
    container_name: justjio-web
    image: ghcr.io/rowentey/justjio/web:latest
    networks:
      - justjio_network
      - caddy_network
    restart: unless-stopped
    environment:
      APP_ENV_PREFIX: VITE
      VITE_API_URL: https://justjio-api-staging.rowentey.xyz/v1
      VITE_WS_URL: wss://justjio-ws-staging.rowentey.xyz
    depends_on:
      - api-server
      - ws-server

  api-server:
    container_name: justjio-api
    image: ghcr.io/rowentey/justjio/api:latest
    restart: unless-stopped
    networks:
      - justjio_network
      - caddy_network
    environment:
      DSN: postgresql://postgres:${POSTGRES_PASSWORD}@postgres/postgres?sslmode=disable
      PORT: 8080
      JWT_SECRET: ${JWT_SECRET}
      KAFKA_URL: kafka:29092
      OUTLOOK_EMAIL: ${OUTLOOK_EMAIL}
      OUTLOOK_PASSWORD: ${OUTLOOK_PASSWORD}
    entrypoint: ["/api-server", "staging"]
    depends_on:
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy

  ws-server:
    container_name: justjio-ws
    image: ghcr.io/rowentey/justjio/ws:latest
    restart: unless-stopped
    networks:
      - justjio_network
      - caddy_network
    environment:
      PORT: 8081
      JWT_SECRET: ${JWT_SECRET}
      KAFKA_URL: kafka:29092
    depends_on:
      kafka:
        condition: service_started

  kafka:
    container_name: justjio-kafka
    image: confluentinc/cp-kafka:latest
    restart: unless-stopped
    environment:
      KAFKA_KRAFT_MODE: "true" # This enables KRaft mode in Kafka.
      KAFKA_PROCESS_ROLES: controller,broker # Kafka acts as both broker and controller.
      KAFKA_NODE_ID: 1 # A unique ID for this Kafka instance.
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@localhost:9093" # Defines the controller voters.
      KAFKA_LISTENERS: INNER://kafka:29092,PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INNER:PLAINTEXT,PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_ADVERTISED_LISTENERS: INNER://kafka:29092,PLAINTEXT://localhost:9092
      KAFKA_LOG_DIRS: /var/lib/kafka/data # Where Kafka stores its logs.
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true" # Kafka will automatically create topics if needed.
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 # Since weâ€™re running one broker, one replica is enough.
      KAFKA_LOG_RETENTION_HOURS: 168 # Keep logs for 7 days.
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0 # No delay for consumer rebalancing.
      CLUSTER_ID: "Mk3OEYBSD34fcwNTJENDM2Qk" # A unique ID for the Kafka cluster.
    ports:
      - "9092:9092" # Port for Kafka broker
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "./opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server localhost:9092 > /dev/null 2>&1",
        ]
      interval: 10s
      timeout: 10s
      retries: 5

  postgres:
    container_name: justjio-postgres
    image: postgres:15
    restart: unless-stopped
    networks:
      - justjio_network
    environment:
      PG_USER: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: NUv5oMuh1EWV
      POSTGRES_DB: postgres
    volumes:
      - justjio_pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  justjio_network:
    name: justjio_network
  caddy_network:
    external: true

volumes:
  justjio_pg_data:
