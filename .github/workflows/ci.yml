name: CI pipeline to build Docker Images
on:
  pull_request:
    types: [labeled]
    branches:
      - main
      - dev
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_API: ${{ github.repository }}/api
  IMAGE_NAME_WS: ${{ github.repository }}/ws
  IMAGE_NAME_WEB: ${{ github.repository }}/web

# Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this workflow.
permissions:
  contents: read
  packages: write
  attestations: write
  id-token: write
  pull-requests: write

jobs:
  build-and-push-api-image:
    if: ${{ github.event.label.name == 'ready_for_build' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}
          tags: |
            type=sha
            latest
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: ./server-api
          push: true
          tags: ${{ steps.meta.outputs.tags }}

      - name: Remove `ready_for_build` label
        # always try to run this step, even if the previous steps fail
        if: always()
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          labels: ready_for_build

  build-and-push-ws-image:
    if: ${{ github.event.label.name == 'ready_for_build' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WS }}
          tags: |
            type=sha
            latest

      - name: Build and push WS Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: ./server-ws
          push: true
          tags: ${{ steps.meta.outputs.tags }}

      - name: Remove `ready_for_build` label
        # always try to run this step, even if the previous steps fail
        if: always()
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          labels: ready_for_build

  build-and-push-web-image:
    if: ${{ github.event.label.name == 'ready_for_build' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WEB }}
          tags: |
            type=sha
            latest
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: ./client-web
          push: true
          tags: ${{ steps.meta.outputs.tags }}

      - name: Remove `ready_for_build` label
        # always try to run this step, even if the previous steps fail
        if: always()
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          labels: ready_for_build

  manage-pr-label:
    if: ${{ github.event.label.name == 'ready_for_build' }}
    needs:
      [
        build-and-push-api-image,
        build-and-push-ws-image,
        build-and-push-web-image,
      ]
    runs-on: ubuntu-latest
    steps:
      - name: Remove `ready_for_build` label
        # always try to run this step, even if the previous steps fail
        if: always()
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          labels: ready_for_build
      - name: Add `ready_to_merge` label
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: ready_to_merge
